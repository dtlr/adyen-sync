name: Build and Push Argo Manifests
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag to release'
        required: false

env:
  JMC_REGISTRY: us-east5-docker.pkg.dev
  JDNA_REGISTRY: ghcr.io/dtlr
  IMAGE_NAME: jmc-jdna

jobs:
  generate-and-apply-manifests:
    if: github.ref_name == 'main' || github.ref_name == 'qa'
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - uses: opentofu/setup-opentofu@v1
        id: setup_tofu
        with:
          tofu_wrapper: false

      - uses: azure/setup-kubectl@v4
        id: install_kubectl

      - uses: azure/use-kubelogin@v1
        id: use_kubelogin
        with:
          kubelogin-version: 'v0.1.4'

      - uses: 1password/load-secrets-action@v2
        id: load_secrets
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          DIGITALOCEAN_ACCESS_TOKEN: op://IT Mgmt/am6oas6dfup2hvcwbrwmvl42tm/api_token
          GITHUB_APP_ID: op://Engineering/zpfzsvur3faith3dt6g5fh4jo4/githubAppID
          GITHUB_APP_INSTALLATION_ID: op://Engineering/zpfzsvur3faith3dt6g5fh4jo4/githubAppInstallationID
          GITHUB_APP_PEM_FILE: op://Engineering/zpfzsvur3faith3dt6g5fh4jo4/privateKey
          AWS_ACCESS_KEY_ID: op://Engineering/cqjy5aqoucsbmjcdychmwq43wy/username
          AWS_SECRET_ACCESS_KEY: op://Engineering/cqjy5aqoucsbmjcdychmwq43wy/password

      - uses: digitalocean/action-doctl@v2
        id: install_doctl
        with:
          token: ${{ steps.load_secrets.outputs.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Update vars.auto.tfvars
        id: update_file
        run: |
          # Determine which branch is being used
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            BRANCH="main"
          elif [[ "${{ github.ref_name }}" == "qa" ]]; then
            BRANCH="qa"
          else
            echo "Branch not supported!"
            exit 1
          fi

          # Replace the value in the file for the matched line
          sed -i "s/\($BRANCH *= *\).*/\1\"${{ inputs.tag }}\"/" 1-terraform/vars.auto.tfvars

      - name: OpenTofu fmt
        id: tofu_fmt
        run: cd 0-terraform/ && tofu fmt -check
        continue-on-error: true

      - name: OpenTofu init
        id: tofu_init
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 0-terraform/ && tofu init

      - name: OpenTofu Validate
        id: tofu_validate
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GITHUB_APP_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ steps.load_secrets.outputs.GITHUB_APP_PEM_FILE }}
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 0-terraform/ && tofu validate -no-color

      - name: OpenTofu plan
        id: tofu_plan
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ steps.load_secrets.outputs.CLOUDFLARE_API_TOKEN }}
          GITHUB_APP_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ steps.load_secrets.outputs.GITHUB_APP_PEM_FILE }}
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 0-terraform/ && tofu plan -no-color

      - name: Auto apply plan
        id: tofu_apply
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ steps.load_secrets.outputs.CLOUDFLARE_API_TOKEN }}
          GITHUB_APP_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ steps.load_secrets.outputs.GITHUB_APP_PEM_FILE }}
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 0-terraform/ && tofu apply -auto-approve

      - name: OpenTofu fmt
        id: tofu_fmt_1
        run: cd 1-terraform/ && tofu fmt -check
        continue-on-error: true

      - name: OpenTofu init
        id: tofu_init_1
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 1-terraform/ && tofu init

      - name: OpenTofu set workspace
        id: set-workspace
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 1-terraform/ && tofu workspace select -or-create ${{ github.ref_name }}

      - name: OpenTofu Validate
        id: tofu_validate_1
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GITHUB_APP_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ steps.load_secrets.outputs.GITHUB_APP_PEM_FILE }}
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 1-terraform/ && tofu validate -no-color

      - name: OpenTofu plan
        id: tofu_plan_1
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ steps.load_secrets.outputs.CLOUDFLARE_API_TOKEN }}
          GITHUB_APP_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ steps.load_secrets.outputs.GITHUB_APP_PEM_FILE }}
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 1-terraform/ && tofu plan -no-color

      - name: Auto apply plan
        id: tofu_apply_1
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ steps.load_secrets.outputs.CLOUDFLARE_API_TOKEN }}
          GITHUB_APP_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ steps.load_secrets.outputs.GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PEM_FILE: ${{ steps.load_secrets.outputs.GITHUB_APP_PEM_FILE }}
          AWS_ACCESS_KEY_ID: ${{ steps.load_secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.load_secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        run: cd 1-terraform/ && tofu apply -auto-approve

      - name: Commit and Push Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add 1-terraform/vars.auto.tfvars
          git commit -m "Update vars.auto.tfvars based on branch ${{ github.ref_name }}"
          git push
