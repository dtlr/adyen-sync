name: JDNA Sync

on:
  pull_request:
    types: [closed, opened, reopened, synchronize]
    branches:
      - main
      - qa
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JDNA_REGISTRY: ghcr.io/dtlr
  IMAGE_NAME: jdna-sync

jobs:
  env-setup:
    runs-on: ubuntu-latest
    outputs:
      banners: ${{ steps.read-property.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          sparse-checkout: |
            property.json

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Read property.json to get banners
        id: read-property
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const propertyData = JSON.parse(fs.readFileSync('./property.json', 'utf8'))
            const banners = Object.keys(propertyData)
            return banners

  app-setup:
    if:
      github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' &&
      (github.event.action == 'opened' || github.event.action == 'synchronize' ||
      github.event.action == 'reopened') || github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [env-setup]
    strategy:
      matrix:
        banners: ${{ fromJson(needs.env-setup.outputs.banners) }}
    env:
      APP_ENV: ${{ github.ref_name == 'main' && 'live' || 'test' }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: 1password/load-secrets-action@v2
        id: load_secrets
        with:
          export-env: false
        env:
          CONNECT_TOKEN: op://Engineering/jrurekjt6arylw3fnmwy53rkwu/credential
          NEON_API_KEY: op://Engineering/lus42zxvxdkmb6ln5cjcll7qnm/api_key
          NEON_ORG_ID: op://Engineering/lus42zxvxdkmb6ln5cjcll7qnm/dtlr_org_id
          APP_NEON_DATABASE_URI:
            op://Engineering/jdna-sync-${{ matrix.banners }}-${{ env.APP_ENV }}/connection_string

      - name: Install dependencies
        run: npm ci

      - name: Ensure Neon Project is created
        env:
          CONNECT_TOKEN: ${{ steps.load_secrets.outputs.CONNECT_TOKEN }}
          NEON_API_KEY: ${{ steps.load_secrets.outputs.NEON_API_KEY }}
          NEON_ORG_ID: ${{ steps.load_secrets.outputs.NEON_ORG_ID }}
          APP_NEON_DATABASE_URI: ${{ steps.load_secrets.outputs.APP_NEON_DATABASE_URI }}
        run: npm run neon:create

      - name: Ensure Neon Project is migrated
        env:
          CONNECT_TOKEN: ${{ steps.load_secrets.outputs.CONNECT_TOKEN }}
          NEON_API_KEY: ${{ steps.load_secrets.outputs.NEON_API_KEY }}
          NEON_ORG_ID: ${{ steps.load_secrets.outputs.NEON_ORG_ID }}
          APP_NEON_DATABASE_URI: ${{ steps.load_secrets.outputs.APP_NEON_DATABASE_URI }}
        run: npm run neon:migrate

  build:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    needs: [app-setup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.JDNA_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.JDNA_REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=JDNA Sync
            org.opencontainers.image.description=Syncs JDNA data to databases and other services
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.vendor=DTLR, Inc.
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          flavor: |
            latest=true
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=edge,enable=true,priority=700,branch=$repo.default_branch

      - name: Build and push
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.JDNA_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Extract the sha tag
        id: extract_sha_tag
        run: |
          tag=$(echo '${{ steps.metadata.outputs.json }}' | jq -r '.tags[] | select(test(":sha")) | split(":")[1]')
          echo "sha_tag=${tag}" >> $GITHUB_OUTPUT

      - name: Trigger release
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = '${{ github.repository }}'.split('/')
            await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: 'release.yml',
              ref: "${{ github.ref_name }}",

              inputs: { tag: "${{ steps.extract_sha_tag.outputs.sha_tag }}" }
            })
